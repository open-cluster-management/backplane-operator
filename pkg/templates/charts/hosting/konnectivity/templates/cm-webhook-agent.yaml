apiVersion: apps/v1
kind: Deployment
metadata:
  name: cluster-manager-webhook-konnectivity-agent
  namespace: {{ .Values.global.namespace }}
spec:
  # progressDeadlineSeconds: 600
  # replicas: 1
  # revisionHistoryLimit: 10
  selector:
    matchLabels:
      installer.open-cluster-management.io/mce-component: cluster-manager-webhooks-konnectivity-agent
      installer.open-cluster-management.io/hosted-engine: {{ .Values.global.name }}
  # strategy:
  #   rollingUpdate:
  #     maxSurge: 25%
  #     maxUnavailable: 25%
  #   type: RollingUpdate
  template:
    metadata:
      labels:
        # XXX:
        # Is there some best practice that says we should set an "app" label?
        # If not, delete this as this deployment spec does not oatherwise depened on
        # having such a (redundant) label.
        #
        # If we need to specify it, in order to be a unique thing (is that necessary?)
        # maybe we use the form <mce-instance-name>-webhooks-konnectivity-agent-work?
        #
        ## app: hh-1-cluster-manager-webhooks-konnectivity-agent

        installer.open-cluster-management.io/mce-component: cluster-manager-webhooks-konnectivity-agent
        installer.open-cluster-management.io/hosted-engine: {{ .Values.global.name }}
    spec:
      # XXX: Need to analyze and settle on any node or pod affinity we sould specify here.
      #      For now, we just leave ourselves open to the whims of the kube scheduler.
      # affinity:
      #   <deferred for now>

      automountServiceAccountToken: false

      containers:
      - args:
        - --proxy-server-host
        - konnectivity-server.{{ .Values.global.hyperShiftCPNS }}.svc
        - --agent-identifiers
        - {{ range $i,$v :=.Values.global.proxyAddr }}{{ if $i }}&{{ end }}ipv4={{ $v }}{{ end }}
        - --logtostderr=true
        - --ca-cert
        - /etc/konnectivity/agent/ca.crt
        - --agent-cert
        - /etc/konnectivity/agent/tls.crt
        - --agent-key
        - /etc/konnectivity/agent/tls.key
        - --proxy-server-port
        - "8091"
        - --health-server-port
        - "2041"
        - --keepalive-time
        - 30s
        - --probe-interval
        - 30s
        - --sync-interval
        - 1m
        - --sync-interval-cap
        - 5m
        command:
        - /usr/bin/proxy-agent
        # MCE has an external image entry for the proxy agent image.  SHould we use that?
        image: {{ .Values.global.imageOverrides.apiserver_network_policy }}
        imagePullPolicy: Always
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: healthz
            port: 2041
            scheme: HTTP
          initialDelaySeconds: 120
          periodSeconds: 60
          successThreshold: 1
          timeoutSeconds: 30
        name: konnectivity-agent
        resources:
          requests:
            cpu: 40m
            memory: 50Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/konnectivity/agent
          name: agent-certs
      dnsPolicy: ClusterFirst
      priorityClassName: hypershift-control-plane
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      # XXX: What kind of nodes get corresponding taints?
      tolerations:
      - effect: NoSchedule
        key: hypershift.openshift.io/control-plane
        operator: Equal
        value: "true"
      - effect: NoSchedule
        key: hypershift.openshift.io/cluster
        operator: Equal
        value: {{ .Values.global.hyperShiftCPNS }}
      volumes:
      - name: agent-certs
        secret:
          defaultMode: 420
          # This secret is copied into the hosted MCE operand namespace.
          secretName: konnectivity-agent
